<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MediCards - 医学英语记忆专家</title>
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&family=Noto+Sans+SC:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        :root {
            --primary-color: #4a89dc;
            --secondary-color: #5d9cec;
            --accent-color: #ff7eb9;
            --light-color: #f5f7fa;
            --dark-color: #2c3e50;
            --success-color: #48cfad;
            --warning-color: #ffce54;
            --danger-color: #ed5565;
            --text-color: #434a54;
            --text-light: #aab2bd;
            --card-shadow: 0 10px 30px -15px rgba(0, 0, 0, 0.2);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Quicksand', 'Noto Sans SC', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #e6e9f0 100%);
            color: var(--text-color);
            min-height: 100vh;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            margin-bottom: 30px;
            position: relative;
        }

        .logo {
            display: flex;
            align-items: center;
            color: var(--primary-color);
            font-weight: 700;
            font-size: 24px;
            text-decoration: none;
        }

        .logo i {
            margin-right: 10px;
            font-size: 28px;
            color: var(--accent-color);
        }

        .user-actions {
            display: flex;
            align-items: center;
        }

        .btn {
            padding: 10px 20px;
            border-radius: 50px;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-family: 'Quicksand', 'Noto Sans SC', sans-serif;
        }

        .btn i {
            margin-right: 8px;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: #3a70c2;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(74, 137, 220, 0.4);
        }

        .btn-outline {
            background-color: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
            margin-right: 10px;
        }

        .btn-outline:hover {
            background-color: var(--primary-color);
            color: white;
            transform: translateY(-2px);
        }

        .btn-accent {
            background-color: var(--accent-color);
            color: white;
        }

        .btn-accent:hover {
            background-color: #ff6ba8;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 126, 185, 0.4);
        }

        .tabs {
            display: flex;
            margin-bottom: 30px;
            background: white;
            border-radius: 50px;
            padding: 5px;
            box-shadow: var(--card-shadow);
            position: relative;
            z-index: 1;
        }

        .tab {
            flex: 1;
            text-align: center;
            padding: 12px 0;
            cursor: pointer;
            border-radius: 50px;
            transition: var(--transition);
            font-weight: 600;
            color: var(--text-light);
            position: relative;
        }

        .tab.active {
            color: var(--primary-color);
            background-color: rgba(74, 137, 220, 0.1);
        }

        .tab-indicator {
            position: absolute;
            height: calc(100% - 10px);
            background-color: white;
            border-radius: 50px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            z-index: -1;
        }

        .tab-content {
            display: none;
            animation: fadeIn 0.5s ease;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .card {
            background: white;
            border-radius: 15px;
            box-shadow: var(--card-shadow);
            overflow: hidden;
            transition: var(--transition);
            margin-bottom: 20px;
            perspective: 1000px;
            height: 300px;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px -10px rgba(0, 0, 0, 0.2);
        }

        .card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            text-align: center;
            transition: transform 0.6s;
            transform-style: preserve-3d;
        }

        .card.flipped .card-inner {
            transform: rotateY(180deg);
        }

        .card-front, .card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            padding: 25px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .card-front {
            background: linear-gradient(135deg, #ffffff 0%, #f5f7fa 100%);
        }

        .card-back {
            background: linear-gradient(135deg, #4a89dc 0%, #5d9cec 100%);
            color: white;
            transform: rotateY(180deg);
        }

        .term {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 10px;
            color: var(--primary-color);
        }

        .pronunciation {
            font-size: 16px;
            color: var(--text-light);
            margin-bottom: 15px;
        }

        .speak-btn {
            background-color: var(--accent-color);
            color: white;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            cursor: pointer;
            transition: var(--transition);
        }

        .speak-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 5px 15px rgba(255, 126, 185, 0.4);
        }

        .definition {
            font-size: 18px;
            line-height: 1.6;
            margin-bottom: 15px;
        }

        .mnemonic {
            font-style: italic;
            background-color: rgba(255, 255, 255, 0.2);
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 15px;
        }

        .example {
            font-size: 14px;
            background-color: rgba(255, 255, 255, 0.3);
            padding: 10px;
            border-radius: 10px;
        }

        .card-controls {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .card-controls .btn {
            margin: 0 5px;
        }

        .progress-container {
            background-color: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: var(--card-shadow);
            margin-bottom: 30px;
        }

        .progress-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .progress-bar {
            height: 10px;
            background-color: #e6e9f0;
            border-radius: 5px;
            overflow: hidden;
            margin-bottom: 10px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4a89dc 0%, #ff7eb9 100%);
            border-radius: 5px;
            transition: width 0.5s ease;
        }

        .progress-stats {
            display: flex;
            justify-content: space-between;
            font-size: 14px;
            color: var(--text-light);
        }

        .add-card-form {
            background-color: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: var(--card-shadow);
            margin-bottom: 30px;
        }

        .form-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 20px;
            color: var(--primary-color);
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark-color);
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #e6e9f0;
            border-radius: 10px;
            font-family: 'Quicksand', 'Noto Sans SC', sans-serif;
            transition: var(--transition);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(74, 137, 220, 0.2);
        }

        textarea.form-control {
            min-height: 100px;
            resize: vertical;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background-color: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: var(--card-shadow);
            transition: var(--transition);
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-title {
            font-size: 14px;
            color: var(--text-light);
            margin-bottom: 10px;
        }

        .stat-value {
            font-size: 28px;
            font-weight: 700;
            color: var(--primary-color);
        }

        .chart-container {
            background-color: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: var(--card-shadow);
            margin-bottom: 30px;
            height: 300px;
        }

        .floating-bubbles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
        }

        .bubble {
            position: absolute;
            bottom: -100px;
            background: rgba(255, 126, 185, 0.1);
            border-radius: 50%;
            animation: float 15s infinite ease-in;
        }

        .bubble:nth-child(1) {
            width: 40px;
            height: 40px;
            left: 10%;
            animation-duration: 8s;
        }

        .bubble:nth-child(2) {
            width: 20px;
            height: 20px;
            left: 20%;
            animation-duration: 5s;
            animation-delay: 1s;
        }

        .bubble:nth-child(3) {
            width: 50px;
            height: 50px;
            left: 35%;
            animation-duration: 7s;
            animation-delay: 2s;
        }

        .bubble:nth-child(4) {
            width: 80px;
            height: 80px;
            left: 50%;
            animation-duration: 11s;
            animation-delay: 0s;
        }

        .bubble:nth-child(5) {
            width: 35px;
            height: 35px;
            left: 55%;
            animation-duration: 6s;
            animation-delay: 1s;
        }

        .bubble:nth-child(6) {
            width: 45px;
            height: 45px;
            left: 65%;
            animation-duration: 8s;
            animation-delay: 3s;
        }

        .bubble:nth-child(7) {
            width: 25px;
            height: 25px;
            left: 75%;
            animation-duration: 7s;
            animation-delay: 2s;
        }

        .bubble:nth-child(8) {
            width: 80px;
            height: 80px;
            left: 80%;
            animation-duration: 6s;
            animation-delay: 1s;
        }

        @keyframes float {
            0% {
                bottom: -100px;
                transform: translateX(0);
            }
            50% {
                transform: translateX(100px);
            }
            100% {
                bottom: 1080px;
                transform: translateX(-200px);
            }
        }

        .confetti {
            position: fixed;
            width: 10px;
            height: 10px;
            background-color: var(--accent-color);
            opacity: 0;
            z-index: 999;
            animation: confetti-fall 3s ease-in-out;
        }

        @keyframes confetti-fall {
            0% {
                transform: translateY(-100px) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(1000px) rotate(720deg);
                opacity: 0;
            }
        }

        .search-bar {
            display: flex;
            margin-bottom: 20px;
        }

        .search-input {
            flex: 1;
            padding: 12px 20px;
            border: 1px solid #e6e9f0;
            border-radius: 50px 0 0 50px;
            font-family: 'Quicksand', 'Noto Sans SC', sans-serif;
            transition: var(--transition);
        }

        .search-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .search-btn {
            padding: 0 20px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 0 50px 50px 0;
            cursor: pointer;
            transition: var(--transition);
        }

        .search-btn:hover {
            background-color: #3a70c2;
        }

        .filter-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }

        .filter-tag {
            padding: 8px 15px;
            background-color: white;
            border-radius: 50px;
            font-size: 14px;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .filter-tag.active {
            background-color: var(--primary-color);
            color: white;
        }

        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }

        .empty-state {
            text-align: center;
            padding: 50px 20px;
            color: var(--text-light);
        }

        .empty-state i {
            font-size: 50px;
            margin-bottom: 20px;
            color: var(--accent-color);
        }

        .empty-state h3 {
            font-size: 20px;
            margin-bottom: 10px;
            color: var(--dark-color);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .modal.show {
            display: flex;
            opacity: 1;
        }

        .modal-content {
            background-color: white;
            border-radius: 15px;
            width: 90%;
            max-width: 500px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            transform: translateY(-20px);
            transition: transform 0.3s ease;
        }

        .modal.show .modal-content {
            transform: translateY(0);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 600;
            color: var(--primary-color);
        }

        .close-modal {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--text-light);
        }

        .import-export-options {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .option-card {
            padding: 15px;
            border: 1px solid #e6e9f0;
            border-radius: 10px;
            cursor: pointer;
            transition: var(--transition);
        }

        .option-card:hover {
            border-color: var(--primary-color);
            background-color: rgba(74, 137, 220, 0.05);
        }

        .option-title {
            font-weight: 600;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
        }

        .option-title i {
            margin-right: 10px;
            color: var(--primary-color);
        }

        .option-desc {
            font-size: 14px;
            color: var(--text-light);
        }

        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: var(--success-color);
            color: white;
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            z-index: 1001;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
        }

        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }

        .toast i {
            margin-right: 10px;
            font-size: 20px;
        }

        .toast.error {
            background-color: var(--danger-color);
        }

        .toast.warning {
            background-color: var(--warning-color);
        }

        @media (max-width: 768px) {
            .cards-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .user-actions {
                margin-top: 15px;
                width: 100%;
                justify-content: space-between;
            }
            
            .btn-outline {
                margin-right: 0;
            }
        }

        /* 小仙女风格添加 */
        .fairy-dust {
            position: absolute;
            width: 5px;
            height: 5px;
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 50%;
            pointer-events: none;
            z-index: -1;
        }

        .sparkle {
            position: absolute;
            width: 10px;
            height: 10px;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23ff7eb9"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 8.332-1.151z"/></svg>') no-repeat center;
            background-size: contain;
            pointer-events: none;
            z-index: -1;
            animation: sparkle-twinkle 2s infinite alternate;
        }

        @keyframes sparkle-twinkle {
            0% { opacity: 0.2; transform: scale(0.8); }
            100% { opacity: 1; transform: scale(1.2); }
        }

        .pink-accent {
            color: var(--accent-color);
        }

        .header-decoration {
            position: absolute;
            width: 150px;
            height: 150px;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" fill="%23ff7eb9" opacity="0.1"><path d="M50 0 Q75 25 100 50 Q75 75 50 100 Q25 75 0 50 Q25 25 50 0"/></svg>') no-repeat center;
            background-size: contain;
            top: -50px;
            right: -50px;
            z-index: -1;
        }

        /* 卡片翻转动画改进 */
        .card {
            transform-style: preserve-3d;
            transition: transform 0.5s cubic-bezier(0.4, 0.2, 0.2, 1);
        }

        .card.flipped {
            transform: rotateY(180deg);
        }

        .card-front, .card-back {
            backface-visibility: hidden;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .card-back {
            transform: rotateY(180deg);
        }
    </style>
</head>
<body>
    <div class="floating-bubbles">
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
    </div>

    <div class="container">
        <header>
            <div class="header-decoration"></div>
            <a href="#" class="logo">
                <i class="fas fa-heartbeat"></i>
                <span>Medi<span class="pink-accent">Cards</span></span>
            </a>
            <div class="user-actions">
                <button class="btn btn-outline">
                    <i class="fas fa-sign-in-alt"></i> 登录
                </button>
                <button class="btn btn-primary" id="importExportBtn">
                    <i class="fas fa-file-import"></i> 导入/导出
                </button>
            </div>
        </header>

        <div class="progress-container">
            <div class="progress-title">
                <span>今日学习进度</span>
                <span>15/20 个术语</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: 75%"></div>
            </div>
            <div class="progress-stats">
                <span>已掌握: 128 个</span>
                <span>学习中: 42 个</span>
                <span>待学习: 830 个</span>
            </div>
        </div>

        <div class="tabs" id="tabs">
            <div class="tab active" data-tab="learn">学习模式</div>
            <div class="tab" data-tab="browse">浏览模式</div>
            <div class="tab" data-tab="add">添加模式</div>
            <div class="tab" data-tab="stats">统计模式</div>
            <div class="tab-indicator" style="width: calc(25% - 10px); transform: translateX(5px);"></div>
        </div>

        <div class="tab-content active" id="learn-tab">
            <div class="card" id="learning-card">
                <div class="card-inner">
                    <div class="card-front">
                        <div class="term">Hypertension</div>
                        <div class="pronunciation">/ˌhaɪ.pərˈten.ʃən/</div>
                        <button class="speak-btn" id="speakBtn">
                            <i class="fas fa-volume-up"></i>
                        </button>
                        <div class="definition">点击卡片查看定义</div>
                    </div>
                    <div class="card-back">
                        <div class="definition">高血压，指动脉血压持续升高的慢性疾病</div>
                        <div class="mnemonic">记忆技巧: "Hyper"表示"高"，"tension"表示"压力"，合起来就是"高血压"</div>
                        <div class="example">临床例句: The patient was diagnosed with stage 2 hypertension and prescribed antihypertensive medications.</div>
                    </div>
                </div>
            </div>
            <div class="card-controls">
                <button class="btn btn-accent" id="knowBtn">
                    <i class="fas fa-check"></i> 已掌握
                </button>
                <button class="btn btn-outline" id="flipCardBtn">
                    <i class="fas fa-redo"></i> 翻转
                </button>
                <button class="btn btn-accent" id="dontKnowBtn">
                    <i class="fas fa-times"></i> 未掌握
                </button>
            </div>
        </div>

        <div class="tab-content" id="browse-tab">
            <div class="search-bar">
                <input type="text" class="search-input" placeholder="搜索医学术语...">
                <button class="search-btn">
                    <i class="fas fa-search"></i>
                </button>
            </div>
            <div class="filter-tags">
                <div class="filter-tag active">全部</div>
                <div class="filter-tag">解剖学</div>
                <div class="filter-tag">药理学</div>
                <div class="filter-tag">病理学</div>
                <div class="filter-tag">诊断学</div>
                <div class="filter-tag">治疗学</div>
            </div>
            <div class="cards-grid" id="browse-cards">
                <!-- 卡片将通过JavaScript动态添加 -->
            </div>
        </div>

        <div class="tab-content" id="add-tab">
            <div class="add-card-form">
                <h3 class="form-title">添加新术语卡片</h3>
                <form id="addCardForm">
                    <div class="form-group">
                        <label for="term" class="form-label">医学术语</label>
                        <input type="text" id="term" class="form-control" placeholder="例如: Hypertension" required>
                    </div>
                    <div class="form-group">
                        <label for="pronunciation" class="form-label">发音/音标</label>
                        <input type="text" id="pronunciation" class="form-control" placeholder="例如: /ˌhaɪ.pərˈten.ʃən/">
                    </div>
                    <div class="form-group">
                        <label for="definition" class="form-label">中文定义</label>
                        <textarea id="definition" class="form-control" placeholder="例如: 高血压，指动脉血压持续升高的慢性疾病" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="mnemonic" class="form-label">记忆技巧</label>
                        <textarea id="mnemonic" class="form-control" placeholder="例如: 'Hyper'表示'高'，'tension'表示'压力'，合起来就是'高血压'"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="example" class="form-label">临床例句</label>
                        <textarea id="example" class="form-control" placeholder="例如: The patient was diagnosed with stage 2 hypertension and prescribed antihypertensive medications."></textarea>
                    </div>
                    <div class="form-group">
                        <label for="category" class="form-label">分类</label>
                        <select id="category" class="form-control">
                            <option value="general">通用</option>
                            <option value="anatomy">解剖学</option>
                            <option value="pharmacology">药理学</option>
                            <option value="pathology">病理学</option>
                            <option value="diagnosis">诊断学</option>
                            <option value="treatment">治疗学</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-plus"></i> 添加卡片
                    </button>
                </form>
            </div>
        </div>

        <div class="tab-content" id="stats-tab">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-title">已学习术语</div>
                    <div class="stat-value">170</div>
                </div>
                <div class="stat-card">
                    <div class="stat-title">掌握率</div>
                    <div class="stat-value">75%</div>
                </div>
                <div class="stat-card">
                    <div class="stat-title">连续学习天数</div>
                    <div class="stat-value">14</div>
                </div>
                <div class="stat-card">
                    <div class="stat-title">今日学习时间</div>
                    <div class="stat-value">25m</div>
                </div>
            </div>
            <div class="chart-container">
                <!-- 这里将放置学习进度图表 -->
                <canvas id="progressChart"></canvas>
            </div>
            <div class="chart-container">
                <!-- 这里将放置记忆曲线图表 -->
                <canvas id="memoryCurveChart"></canvas>
            </div>
        </div>
    </div>

    <div class="modal" id="importExportModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">导入/导出卡片</h3>
                <button class="close-modal">&times;</button>
            </div>
            <div class="import-export-options">
                <div class="option-card" id="exportCards">
                    <div class="option-title">
                        <i class="fas fa-file-export"></i>
                        <span>导出所有卡片</span>
                    </div>
                    <div class="option-desc">将您所有的学习卡片导出为CSV文件，方便备份或分享</div>
                </div>
                <div class="option-card" id="importCards">
                    <div class="option-title">
                        <i class="fas fa-file-import"></i>
                        <span>导入卡片</span>
                    </div>
                    <div class="option-desc">从CSV文件导入医学术语卡片，快速扩充您的学习库</div>
                </div>
                <div class="option-card" id="downloadTemplate">
                    <div class="option-title">
                        <i class="fas fa-file-download"></i>
                        <span>下载模板</span>
                    </div>
                    <div class="option-desc">获取标准CSV模板文件，了解正确的导入格式</div>
                </div>
            </div>
        </div>
    </div>

    <div class="toast" id="toast">
        <i class="fas fa-check-circle"></i>
        <span id="toastMessage">卡片已成功添加！</span>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // 初始化变量
        let currentTab = 'learn';
        let cards = [];
        let currentCardIndex = 0;
        
        // 示例卡片数据
        const sampleCards = [
            {
                id: 1,
                term: 'Hypertension',
                pronunciation: '/ˌhaɪ.pərˈten.ʃən/',
                definition: '高血压，指动脉血压持续升高的慢性疾病',
                mnemonic: '"Hyper"表示"高"，"tension"表示"压力"，合起来就是"高血压"',
                example: 'The patient was diagnosed with stage 2 hypertension and prescribed antihypertensive medications.',
                category: 'pathology',
                mastered: false,
                lastReviewed: '2023-05-15',
                reviewCount: 3
            },
            {
                id: 2,
                term: 'Myocardial Infarction',
                pronunciation: '/ˌmaɪ.oʊˈkɑːr.di.əl ɪnˈfɑːrk.ʃən/',
                definition: '心肌梗死，由于冠状动脉阻塞导致心肌缺血坏死',
                mnemonic: '"Myo"肌肉 + "cardial"心脏 + "infarction"梗死 = 心肌梗死',
                example: 'The 65-year-old male presented with chest pain and was subsequently diagnosed with acute myocardial infarction.',
                category: 'pathology',
                mastered: false,
                lastReviewed: '2023-05-10',
                reviewCount: 2
            },
            {
                id: 3,
                term: 'Antibiotic',
                pronunciation: '/ˌæn.ti.baɪˈɒt.ɪk/',
                definition: '抗生素，用于治疗细菌感染的药物',
                mnemonic: '"Anti"对抗 + "biotic"生命的 = 对抗细菌生命的药物',
                example: 'The physician prescribed a broad-spectrum antibiotic for the patient with pneumonia.',
                category: 'pharmacology',
                mastered: true,
                lastReviewed: '2023-05-12',
                reviewCount: 5
            },
            {
                id: 4,
                term: 'Cerebrovascular',
                pronunciation: '/səˌriː.brəʊˈvæs.kjə.lər/',
                definition: '脑血管的，与大脑血管相关的',
                mnemonic: '"Cerebro"大脑 + "vascular"血管的 = 脑血管的',
                example: 'The patient has a history of cerebrovascular disease with two prior strokes.',
                category: 'anatomy',
                mastered: false,
                lastReviewed: '2023-05-08',
                reviewCount: 1
            },
            {
                id: 5,
                term: 'Pneumothorax',
                pronunciation: '/ˌnjuː.məʊˈθɔː.ræks/',
                definition: '气胸，空气进入胸膜腔导致肺塌陷',
                mnemonic: '"Pneumo"空气 + "thorax"胸腔 = 胸腔内有空气',
                example: 'The trauma patient developed a tension pneumothorax requiring immediate needle decompression.',
                category: 'pathology',
                mastered: false,
                lastReviewed: '2023-05-05',
                reviewCount: 2
            },
            {
                id: 6,
                term: 'Electrocardiogram',
                pronunciation: '/ɪˌlek.trəʊˈkɑː.di.ə.ɡræm/',
                definition: '心电图，记录心脏电活动的检查',
                mnemonic: '"Electro"电 + "cardio"心脏 + "gram"图 = 心电图',
                example: 'The ECG showed ST-segment elevation consistent with acute myocardial infarction.',
                category: 'diagnosis',
                mastered: true,
                lastReviewed: '2023-05-14',
                reviewCount: 4
            },
            {
                id: 7,
                term: 'Hemoglobin',
                pronunciation: '/ˈhiː.məˌɡloʊ.bɪn/',
                definition: '血红蛋白，红细胞中携带氧气的蛋白质',
                mnemonic: '"Hemo"血 + "globin"蛋白 = 血红蛋白',
                example: 'The patient\'s hemoglobin level was 7.8 g/dL, indicating severe anemia.',
                category: 'anatomy',
                mastered: true,
                lastReviewed: '2023-05-13',
                reviewCount: 6
            },
            {
                id: 8,
                term: 'Nephrology',
                pronunciation: '/nəˈfrɒl.ə.dʒi/',
                definition: '肾脏病学，研究肾脏及其疾病的医学分支',
                mnemonic: '"Nephr"肾 + "ology"学科 = 肾脏病学',
                example: 'The patient with end-stage renal disease was referred to a nephrology specialist.',
                category: 'treatment',
                mastered: false,
                lastReviewed: '2023-05-09',
                reviewCount: 3
            }
        ];

        // 从本地存储加载卡片或使用示例数据
        function loadCards() {
            const savedCards = localStorage.getItem('medicalTermCards');
            if (savedCards) {
                cards = JSON.parse(savedCards);
            } else {
                cards = [...sampleCards];
                saveCards();
            }
            renderBrowseCards();
        }

        // 保存卡片到本地存储
        function saveCards() {
            localStorage.setItem('medicalTermCards', JSON.stringify(cards));
        }

        // 渲染浏览模式的卡片
        function renderBrowseCards(filter = 'all') {
            const browseCardsContainer = document.getElementById('browse-cards');
            browseCardsContainer.innerHTML = '';

            let filteredCards = cards;
            if (filter !== 'all') {
                filteredCards = cards.filter(card => card.category === filter);
            }

            if (filteredCards.length === 0) {
                browseCardsContainer.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-book-open"></i>
                        <h3>没有找到卡片</h3>
                        <p>切换到"添加模式"创建您的第一个医学术语卡片</p>
                    </div>
                `;
                return;
            }

            filteredCards.forEach(card => {
                const cardElement = document.createElement('div');
                cardElement.className = 'card';
                cardElement.innerHTML = `
                    <div class="card-inner">
                        <div class="card-front">
                            <div class="term">${card.term}</div>
                            <div class="pronunciation">${card.pronunciation}</div>
                            <button class="speak-btn" data-term="${card.term}">
                                <i class="fas fa-volume-up"></i>
                            </button>
                            <div class="definition">点击卡片查看定义</div>
                        </div>
                        <div class="card-back">
                            <div class="definition">${card.definition}</div>
                            ${card.mnemonic ? `<div class="mnemonic">${card.mnemonic}</div>` : ''}
                            ${card.example ? `<div class="example">${card.example}</div>` : ''}
                            <div class="category-badge" style="margin-top: 10px; background: ${getCategoryColor(card.category)}; color: white; padding: 5px 10px; border-radius: 20px; font-size: 12px;">
                                ${getCategoryName(card.category)}
                            </div>
                        </div>
                    </div>
                `;
                cardElement.addEventListener('click', function() {
                    this.classList.toggle('flipped');
                });
                browseCardsContainer.appendChild(cardElement);
            });

            // 为所有发音按钮添加事件监听器
            document.querySelectorAll('.speak-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    speakTerm(this.getAttribute('data-term'));
                });
            });
        }

        // 获取分类名称
        function getCategoryName(category) {
            const categories = {
                'general': '通用',
                'anatomy': '解剖学',
                'pharmacology': '药理学',
                'pathology': '病理学',
                'diagnosis': '诊断学',
                'treatment': '治疗学'
            };
            return categories[category] || '通用';
        }

        // 获取分类颜色
        function getCategoryColor(category) {
            const colors = {
                'general': '#aab2bd',
                'anatomy': '#4fc1e9',
                'pharmacology': '#48cfad',
                'pathology': '#ed5565',
                'diagnosis': '#ffce54',
                'treatment': '#ac92ec'
            };
            return colors[category] || '#aab2bd';
        }

        // 使用Web Speech API发音
        function speakTerm(term) {
            if ('speechSynthesis' in window) {
                const utterance = new SpeechSynthesisUtterance(term);
                utterance.lang = 'en-US';
                utterance.rate = 0.8;
                speechSynthesis.speak(utterance);
            } else {
                showToast('您的浏览器不支持语音合成', 'warning');
            }
        }

        // 显示学习卡片
        function showLearningCard() {
            if (cards.length === 0) {
                document.getElementById('learn-tab').innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-book-open"></i>
                        <h3>没有学习卡片</h3>
                        <p>切换到"添加模式"创建您的第一个医学术语卡片</p>
                    </div>
                `;
                return;
            }

            const card = cards[currentCardIndex];
            const learningCard = document.getElementById('learning-card');
            learningCard.innerHTML = `
                <div class="card-inner">
                    <div class="card-front">
                        <div class="term">${card.term}</div>
                        <div class="pronunciation">${card.pronunciation}</div>
                        <button class="speak-btn" id="speakBtn">
                            <i class="fas fa-volume-up"></i>
                        </button>
                        <div class="definition">点击卡片查看定义</div>
                    </div>
                    <div class="card-back">
                        <div class="definition">${card.definition}</div>
                        ${card.mnemonic ? `<div class="mnemonic">${card.mnemonic}</div>` : ''}
                        ${card.example ? `<div class="example">${card.example}</div>` : ''}
                    </div>
                </div>
            `;
            
            // 添加点击事件来翻转卡片
            learningCard.addEventListener('click', function() {
                this.classList.toggle('flipped');
            });

            // 添加发音按钮事件
            document.getElementById('speakBtn').addEventListener('click', function(e) {
                e.stopPropagation();
                speakTerm(card.term);
            });
        }

        // 显示Toast通知
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            
            toastMessage.textContent = message;
            toast.className = 'toast';
            toast.classList.add(type);
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // 初始化图表
        function initCharts() {
            // 学习进度图表
            const progressCtx = document.getElementById('progressChart').getContext('2d');
            new Chart(progressCtx, {
                type: 'line',
                data: {
                    labels: ['1月', '2月', '3月', '4月', '5月'],
                    datasets: [{
                        label: '已学习术语',
                        data: [20, 45, 80, 120, 170],
                        borderColor: '#4a89dc',
                        backgroundColor: 'rgba(74, 137, 220, 0.1)',
                        fill: true,
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // 记忆曲线图表
            const memoryCtx = document.getElementById('memoryCurveChart').getContext('2d');
            new Chart(memoryCtx, {
                type: 'line',
                data: {
                    labels: ['学习后1天', '1周', '1月', '3月', '6月'],
                    datasets: [{
                        label: '记忆保留率',
                        data: [100, 60, 40, 30, 25],
                        borderColor: '#ff7eb9',
                        backgroundColor: 'rgba(255, 126, 185, 0.1)',
                        fill: true,
                        tension: 0.3
                    }, {
                        label: '间隔复习',
                        data: [100, 90, 85, 80, 75],
                        borderColor: '#48cfad',
                        backgroundColor: 'rgba(72, 207, 173, 0.1)',
                        fill: true,
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100
                        }
                    }
                }
            });
        }

        // 添加小仙女风格的装饰元素
        function addFairyElements() {
            // 添加闪烁的星星
            for (let i = 0; i < 20; i++) {
                const sparkle = document.createElement('div');
                sparkle.className = 'sparkle';
                sparkle.style.left = `${Math.random() * 100}%`;
                sparkle.style.top = `${Math.random() * 100}%`;
                sparkle.style.animationDelay = `${Math.random() * 5}s`;
                document.body.appendChild(sparkle);
            }

            // 添加飘落的仙女尘
            setInterval(() => {
                const dust = document.createElement('div');
                dust.className = 'fairy-dust';
                dust.style.left = `${Math.random() * 100}%`;
                dust.style.top = '-10px';
                dust.style.width = `${Math.random() * 5 + 2}px`;
                dust.style.height = dust.style.width;
                dust.style.opacity = Math.random() * 0.5 + 0.1;
                document.body.appendChild(dust);

                // 动画
                const duration = Math.random() * 5 + 3;
                dust.style.transition = `all ${duration}s linear`;
                setTimeout(() => {
                    dust.style.top = '100%';
                    dust.style.left = `${parseFloat(dust.style.left) + (Math.random() * 20 - 10)}%`;
                }, 10);

                // 移除元素
                setTimeout(() => {
                    dust.remove();
                }, duration * 1000);
            }, 300);
        }

        // 添加庆祝效果
        function addConfetti() {
            for (let i = 0; i < 50; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                confetti.style.left = `${Math.random() * 100}%`;
                confetti.style.width = `${Math.random() * 10 + 5}px`;
                confetti.style.height = confetti.style.width;
                confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 75%)`;
                confetti.style.animationDelay = `${Math.random() * 0.5}s`;
                document.body.appendChild(confetti);

                setTimeout(() => {
                    confetti.remove();
                }, 3000);
            }
        }

        // 初始化应用
        document.addEventListener('DOMContentLoaded', function() {
            // 加载卡片数据
            loadCards();
            
            // 显示第一个学习卡片
            showLearningCard();
            
            // 初始化图表
            initCharts();
            
            // 添加小仙女风格元素
            addFairyElements();

            // 标签切换
            document.querySelectorAll('.tab').forEach(tab => {
                tab.addEventListener('click', function() {
                    // 更新活动标签
                    document.querySelector('.tab.active').classList.remove('active');
                    this.classList.add('active');
                    
                    // 更新指示器位置
                    const tabWidth = 100 / document.querySelectorAll('.tab').length;
                    const tabIndex = Array.from(this.parentElement.children).indexOf(this);
                    const indicator = document.querySelector('.tab-indicator');
                    indicator.style.width = `calc(${tabWidth}% - 10px)`;
                    indicator.style.transform = `translateX(calc(${tabIndex * 100}% + 5px))`;
                    
                    // 更新内容
                    currentTab = this.getAttribute('data-tab');
                    document.querySelector('.tab-content.active').classList.remove('active');
                    document.getElementById(`${currentTab}-tab`).classList.add('active');
                });
            });

            // 卡片翻转按钮
            document.getElementById('flipCardBtn').addEventListener('click', function() {
                document.getElementById('learning-card').classList.toggle('flipped');
            });

            // 已掌握按钮
            document.getElementById('knowBtn').addEventListener('click', function() {
                if (cards.length === 0) return;
                
                cards[currentCardIndex].mastered = true;
                cards[currentCardIndex].lastReviewed = new Date().toISOString().split('T')[0];
                cards[currentCardIndex].reviewCount = (cards[currentCardIndex].reviewCount || 0) + 1;
                saveCards();
                
                showToast('太棒了！您已掌握这个术语');
                addConfetti();
                
                // 移动到下一个卡片
                currentCardIndex = (currentCardIndex + 1) % cards.length;
                showLearningCard();
            });

            // 未掌握按钮
            document.getElementById('dontKnowBtn').addEventListener('click', function() {
                if (cards.length === 0) return;
                
                cards[currentCardIndex].mastered = false;
                cards[currentCardIndex].lastReviewed = new Date().toISOString().split('T')[0];
                cards[currentCardIndex].reviewCount = (cards[currentCardIndex].reviewCount || 0) + 1;
                saveCards();
                
                showToast('已标记为需要复习', 'warning');
                
                // 移动到下一个卡片
                currentCardIndex = (currentCardIndex + 1) % cards.length;
                showLearningCard();
            });

            // 添加新卡片表单
            document.getElementById('addCardForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const newCard = {
                    id: Date.now(),
                    term: document.getElementById('term').value,
                    pronunciation: document.getElementById('pronunciation').value,
                    definition: document.getElementById('definition').value,
                    mnemonic: document.getElementById('mnemonic').value,
                    example: document.getElementById('example').value,
                    category: document.getElementById('category').value,
                    mastered: false,
                    lastReviewed: null,
                    reviewCount: 0
                };
                
                cards.unshift(newCard);
                saveCards();
                
                // 重置表单
                this.reset();
                
                showToast('卡片已成功添加！');
                addConfetti();
                
                // 如果当前在浏览模式，更新显示
                if (currentTab === 'browse') {
                    renderBrowseCards();
                }
                
                // 如果当前在学习模式，更新卡片
                if (currentTab === 'learn') {
                    currentCardIndex = 0;
                    showLearningCard();
                }
            });

            // 筛选标签
            document.querySelectorAll('.filter-tag').forEach(tag => {
                tag.addEventListener('click', function() {
                    if (this.classList.contains('active')) return;
                    
                    document.querySelector('.filter-tag.active').classList.remove('active');
                    this.classList.add('active');
                    
                    const filter = this.textContent === '全部' ? 'all' : 
                                  this.textContent === '解剖学' ? 'anatomy' :
                                  this.textContent === '药理学' ? 'pharmacology' :
                                  this.textContent === '病理学' ? 'pathology' :
                                  this.textContent === '诊断学' ? 'diagnosis' :
                                  this.textContent === '治疗学' ? 'treatment' : 'all';
                    
                    renderBrowseCards(filter);
                });
            });

            // 导入/导出模态框
            const importExportModal = document.getElementById('importExportModal');
            const importExportBtn = document.getElementById('importExportBtn');
            const closeModal = document.querySelector('.close-modal');

            importExportBtn.addEventListener('click', function() {
                importExportModal.classList.add('show');
            });

            closeModal.addEventListener('click', function() {
                importExportModal.classList.remove('show');
            });

            window.addEventListener('click', function(e) {
                if (e.target === importExportModal) {
                    importExportModal.classList.remove('show');
                }
            });

            // 导出卡片
            document.getElementById('exportCards').addEventListener('click', function() {
                const csvContent = "data:text/csv;charset=utf-8," 
                    + "Term,Pronunciation,Definition,Mnemonic,Example,Category\n"
                    + cards.map(card => 
                        `"${card.term}","${card.pronunciation}","${card.definition}","${card.mnemonic}","${card.example}","${card.category}"`
                    ).join("\n");
                
                const encodedUri = encodeURI(csvContent);
                const link = document.createElement("a");
                link.setAttribute("href", encodedUri);
                link.setAttribute("download", "medical_terms.csv");
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                showToast('卡片已成功导出为CSV文件');
                importExportModal.classList.remove('show');
            });

            // 下载模板
            document.getElementById('downloadTemplate').addEventListener('click', function() {
                const csvContent = "data:text/csv;charset=utf-8," 
                    + "Term,Pronunciation,Definition,Mnemonic,Example,Category\n"
                    + '"Hypertension","/ˌhaɪ.pərˈten.ʃən/","高血压，指动脉血压持续升高的慢性疾病","\"Hyper\"表示\"高\"，\"tension\"表示\"压力\"，合起来就是\"高血压\"","The patient was diagnosed with stage 2 hypertension and prescribed antihypertensive medications.","pathology"';
                
                const encodedUri = encodeURI(csvContent);
                const link = document.createElement("a");
                link.setAttribute("href", encodedUri);
                link.setAttribute("download", "medical_terms_template.csv");
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                showToast('模板文件已下载');
                importExportModal.classList.remove('show');
            });

            // 导入卡片
            document.getElementById('importCards').addEventListener('click', function() {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = '.csv';
                
                input.onchange = e => {
                    const file = e.target.files[0];
                    const reader = new FileReader();
                    
                    reader.onload = function(event) {
                        try {
                            const csvData = event.target.result;
                            const lines = csvData.split('\n');
                            const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
                            
                            // 检查必需的列
                            const requiredColumns = ['Term', 'Definition'];
                            const missingColumns = requiredColumns.filter(col => !headers.includes(col));
                            
                            if (missingColumns.length > 0) {
                                showToast(`CSV文件缺少必需的列: ${missingColumns.join(', ')}`, 'error');
                                return;
                            }
                            
                            // 解析数据
                            const newCards = [];
                            for (let i = 1; i < lines.length; i++) {
                                if (lines[i].trim() === '') continue;
                                
                                const values = lines[i].split(/,(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/)
                                                    .map(v => v.trim().replace(/^"|"$/g, ''));
                                
                                const card = {};
                                headers.forEach((header, index) => {
                                    card[header.toLowerCase()] = values[index] || '';
                                });
                                
                                // 确保有必需的字段
                                if (card.term && card.definition) {
                                    newCards.push({
                                        id: Date.now() + i,
                                        term: card.term,
                                        pronunciation: card.pronunciation || '',
                                        definition: card.definition,
                                        mnemonic: card.mnemonic || '',
                                        example: card.example || '',
                                        category: card.category || 'general',
                                        mastered: false,
                                        lastReviewed: null,
                                        reviewCount: 0
                                    });
                                }
                            }
                            
                            if (newCards.length > 0) {
                                cards = [...newCards, ...cards]; // 新卡片添加到前面
                                saveCards();
                                showToast(`成功导入 ${newCards.length} 张卡片`);
                                
                                // 刷新显示
                                if (currentTab === 'browse') {
                                    renderBrowseCards();
                                } else if (currentTab === 'learn') {
                                    currentCardIndex = 0;
                                    showLearningCard();
                                }
                            } else {
                                showToast('没有找到可导入的卡片数据', 'warning');
                            }
                        } catch (error) {
                            console.error(error);
                            showToast('导入失败，请检查CSV文件格式', 'error');
                        }
                    };
                    
                    reader.readAsText(file);
                };
                
                input.click();
                importExportModal.classList.remove('show');
            });
        });
    </script>
</body>
</html>
